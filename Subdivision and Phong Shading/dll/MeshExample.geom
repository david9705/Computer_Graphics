#version 150 compatibility

uniform int level;
uniform float Radius;
uniform vec4 Centroid;

layout(triangles) in;
layout(triangle_strip, max_vertices=85) out;

in Vertex{
    vec3 vertexEyeSpace;
	vec3 normal;    
	vec2 _texcoord;
}vertex[];

out vec3 vertexEyeSpace;
out vec3 normal; 
out vec2 tex;

void main(){
	vec3 tempEyeSpace;
	if (level == 0){
		vertexEyeSpace = vertex[0].vertexEyeSpace;
		normal = vertex[0].normal;
		tex = vertex[0]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		vertexEyeSpace = vertex[1].vertexEyeSpace;
		normal = vertex[1].normal;
		tex = vertex[1]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		vertexEyeSpace = vertex[2].vertexEyeSpace;
		normal = vertex[2].normal;
		tex = vertex[2]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		EndPrimitive();
	}
	else if (level == 1){
		tempEyeSpace = (vertex[0].vertexEyeSpace + vertex[1].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[0]._texcoord + vertex[1]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		vertexEyeSpace = vertex[1].vertexEyeSpace;
		normal = vertex[1].normal;
		tex = vertex[1]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[1].vertexEyeSpace + vertex[2].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[1]._texcoord + vertex[2]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		EndPrimitive();
		
		vertexEyeSpace = vertex[0].vertexEyeSpace;
		normal = vertex[0].normal;
		tex = vertex[0]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[0].vertexEyeSpace + vertex[1].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[0]._texcoord + vertex[1]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[0].vertexEyeSpace + vertex[2].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[0]._texcoord + vertex[2]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[1].vertexEyeSpace + vertex[2].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[1]._texcoord + vertex[2]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		vertexEyeSpace = vertex[2].vertexEyeSpace;
		normal = vertex[2].normal;
		tex = vertex[2]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		EndPrimitive();
	}
	else if (level == 2){
		tempEyeSpace = (0.25*vertex[0].vertexEyeSpace + 0.75*vertex[1].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[0]._texcoord + 0.75*vertex[1]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		vertexEyeSpace = vertex[1].vertexEyeSpace;
		normal = vertex[1].normal;
		tex = vertex[1]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = 0.25*vertex[1].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.75*vertex[1]._texcoord + 0.25*vertex[2]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		EndPrimitive();
		
		tempEyeSpace = (vertex[0].vertexEyeSpace + vertex[1].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[0]._texcoord + vertex[1]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (0.25*vertex[0].vertexEyeSpace + 0.75*vertex[1].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[0]._texcoord + 0.75*vertex[1]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = ((vertex[0].vertexEyeSpace + vertex[1].vertexEyeSpace)/2 + (vertex[1].vertexEyeSpace + vertex[2].vertexEyeSpace)/2)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = ((vertex[0]._texcoord + vertex[1]._texcoord) / 2 + (vertex[0]._texcoord + vertex[1]._texcoord) / 2)/2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = 0.25*vertex[2].vertexEyeSpace + 0.75*vertex[1].vertexEyeSpace;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[2]._texcoord + 0.75*vertex[1]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[1].vertexEyeSpace + vertex[2].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[1]._texcoord + vertex[2]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		EndPrimitive();
		
		tempEyeSpace = (0.25*vertex[1].vertexEyeSpace + 0.75*vertex[0].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[1]._texcoord + 0.75*vertex[0]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[0].vertexEyeSpace + vertex[1].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[0]._texcoord + vertex[1]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (2/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[0].vertexEyeSpace) + (1/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (2/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[0]._texcoord) + (1/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[2]._texcoord);
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = ((vertex[0].vertexEyeSpace + vertex[1].vertexEyeSpace)/2 + (vertex[1].vertexEyeSpace + vertex[2].vertexEyeSpace)/2)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = ((vertex[0]._texcoord + vertex[1]._texcoord) / 2 + (vertex[0]._texcoord + vertex[1]._texcoord) / 2)/2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (1/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[0].vertexEyeSpace) + (2/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (1/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[0]._texcoord) + (2/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[2]._texcoord);
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[1].vertexEyeSpace + vertex[2].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[1]._texcoord + vertex[2]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (0.25*vertex[1].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[1]._texcoord + 0.75*vertex[2]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		EndPrimitive();
		
		vertexEyeSpace = vertex[0].vertexEyeSpace;
		normal = vertex[0].normal;
		tex = vertex[0]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (0.25*vertex[1].vertexEyeSpace + 0.75*vertex[0].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[1]._texcoord + 0.75*vertex[0]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (0.25*vertex[2].vertexEyeSpace + 0.75*vertex[0].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[2]._texcoord + 0.75*vertex[0]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (2/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[0].vertexEyeSpace) + (1/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (2/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[0]._texcoord) + (1/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[2]._texcoord);
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (vertex[0].vertexEyeSpace + vertex[2].vertexEyeSpace)/2;
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (vertex[0]._texcoord + vertex[2]._texcoord) / 2;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (1/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[0].vertexEyeSpace) + (2/3)*(0.25*vertex[1].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = (1/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[0]._texcoord) + (2/3)*(0.25*vertex[1]._texcoord + 0.75*vertex[2]._texcoord);
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (0.25*vertex[0].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[0]._texcoord + 0.75*vertex[2]._texcoord;
		vertexEyeSpace =(gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		tempEyeSpace = (0.25*vertex[1].vertexEyeSpace + 0.75*vertex[2].vertexEyeSpace);
		normal = normalize(gl_NormalMatrix * (tempEyeSpace - (gl_ModelViewMatrix * Centroid).xyz));
		tex = 0.25*vertex[1]._texcoord + 0.75*vertex[2]._texcoord;
		vertexEyeSpace = (gl_ModelViewMatrix * Centroid).xyz + normal*Radius;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		vertexEyeSpace = vertex[2].vertexEyeSpace;
		normal = vertex[2].normal;
		tex = vertex[2]._texcoord;
		gl_Position = gl_ProjectionMatrix * vec4(vertexEyeSpace, 1.0);
		EmitVertex();
		EndPrimitive();
	}
    
}
